;; Author: Christopher Olsen

;; Project Euler Problem 2
;;
;; Problem Statement:
;; Each new term in the Fibonacci sequence is generated by adding the previous 
;; two terms. By starting with 1 and 2, the first 10 terms will be:
;;
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; By considering the terms in the Fibonacci sequence whose values do not 
;; exceed four million, find the sum of the even-valued terms.


;; The Plan
;;
;; Recursively step through the Fibonacci sequence, adding the current value
;;  to a running sum if it's even until the current value of the Fib seq is
;;  over 4,000,000.

(defn sum-even-fibs [max]
  (loop [back-2 1
         back-1 1
         sum 0]
    (let [current (+ back-2 back-1)]
      (cond (> current max)
            sum
            (even? current)
            (recur back-1 current (+ current sum))
            :else
            (recur back-1 current sum)))))

(time (sum-even-fibs 4000000))
;; "Elapsed time: 0.077803 msecs"
;; 4613732
